<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From Scratch on Geo&#39;s blog</title>
    <link>https://geonnave.github.io/tags/from-scratch/</link>
    <description>Recent content in From Scratch on Geo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Apr 2016 21:27:45 -0300</lastBuildDate>
    
	<atom:link href="https://geonnave.github.io/tags/from-scratch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How gen_server works: implementing a subset of it in Elixir</title>
      <link>https://geonnave.github.io/posts/how-genserver-works/</link>
      <pubDate>Fri, 22 Apr 2016 21:27:45 -0300</pubDate>
      
      <guid>https://geonnave.github.io/posts/how-genserver-works/</guid>
      <description>Elixir, the language built to run on Erlang VM, brings all the awesome and solid parts of Erlang, whilst it also adds new cool features. My goal with this writing is to use Elixir to explore the inner workings of one of the decades-old Erlang/OTP behavior: the gen_server (which, in Elixir land, is called GenServer).
First, a bit of context. I’ve read Joe Armstrong’s PhD thesis “Making reliable distributed systems in the presence of software errors” where he makes a magnific explanation of a generic server for Erlang using processes, higher order functions and pattern-matching.</description>
    </item>
    
  </channel>
</rss>